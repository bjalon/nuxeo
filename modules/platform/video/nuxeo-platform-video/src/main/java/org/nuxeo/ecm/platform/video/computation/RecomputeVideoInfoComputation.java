/*
 * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *     Charles Boidot
 */
package org.nuxeo.ecm.platform.video.computation;

import static org.nuxeo.ecm.core.api.CoreSession.ALLOW_VERSION_WRITE;
import static org.nuxeo.ecm.core.api.versioning.VersioningService.DISABLE_AUTO_CHECKOUT;
import static org.nuxeo.ecm.core.bulk.action.SetPropertiesAction.PARAM_DISABLE_AUDIT;

import java.io.Serializable;
import java.time.Duration;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.nuxeo.ecm.core.api.Blob;
import org.nuxeo.ecm.core.api.CoreSession;
import org.nuxeo.ecm.core.api.DocumentModel;
import org.nuxeo.ecm.core.api.DocumentNotFoundException;
import org.nuxeo.ecm.core.api.IdRef;
import org.nuxeo.ecm.core.api.NuxeoException;
import org.nuxeo.ecm.core.api.blobholder.BlobHolder;
import org.nuxeo.ecm.core.bulk.action.computation.AbstractBulkComputation;
import org.nuxeo.ecm.core.bulk.message.BulkCommand;
import org.nuxeo.ecm.core.bulk.message.BulkStatus;
import org.nuxeo.ecm.platform.video.VideoDocument;
import org.nuxeo.ecm.platform.video.VideoHelper;
import org.nuxeo.ecm.platform.video.VideoInfo;
import org.nuxeo.ecm.platform.video.action.RecomputeVideoConversionsAction;
import org.nuxeo.lib.stream.computation.ComputationContext;
import org.nuxeo.lib.stream.computation.Record;

/**
 * Computation that fills Video Info.
 *
 * @since 11.5
 */
public class RecomputeVideoInfoComputation extends AbstractBulkComputation {

    private static final Logger log = LogManager.getLogger(RecomputeVideoInfoComputation.class);

    public static final String NAME = "bulk/recomputeVideoInfos";

    public static final String RECOMPUTE_ALL_VIDEO_INFO = "onlyRecomputeMissingVideoInfo";

    protected Boolean recomputeAll;

    protected Record record;

    public RecomputeVideoInfoComputation() {
        super(NAME);
    }

    @Override
    public void processRecord(ComputationContext context, String inputStreamName, Record record) {
        this.record = record;
        super.processRecord(context, inputStreamName, record);
    }

    @Override
    protected Duration getBatchTransactionTimeout() {
        return Duration.ofSeconds(VideoHelper.getTransactionTimeout());
    }

    @Override
    public void startBucket(String bucketKey) {
        BulkCommand command = getCurrentCommand();
        recomputeAll = command.getParam(RECOMPUTE_ALL_VIDEO_INFO);
    }

    @Override
    protected void compute(CoreSession session, List<String> ids, Map<String, Serializable> properties) {
        log.debug("Compute action: {} generating video infos for doc ids: {}",
                RecomputeVideoConversionsAction.ACTION_NAME, ids);
        for (String docId : ids) {
            if (!session.exists(new IdRef(docId))) {
                log.debug("Doc id doesn't exist: {}", docId);
                continue;
            }
            DocumentModel workingDocument = session.getDocument(new IdRef(docId));
            VideoDocument videoDoc = workingDocument.getAdapter(VideoDocument.class);
            VideoInfo videoInfo = videoDoc.getVideo().getVideoInfo();

            // check if the video info has already been generated by checking if duration equals to 0
            if (videoInfo.getDuration() != 0 && !recomputeAll) {
                continue;
            }

            try {
                BlobHolder blobHolder = workingDocument.getAdapter(BlobHolder.class);
                Blob videoBlob = blobHolder.getBlob();
                log.debug("Updating video info of document: {}", workingDocument);
                try {
                    VideoHelper.updateVideoInfo(workingDocument, videoBlob);
                } catch (NuxeoException e) {
                    log.warn("Generation of video info for doc of id: {} has failed", docId);
                }
                log.debug("End updating video info of document: {}", workingDocument);
            } catch (DocumentNotFoundException e) {
                // a parent of the document may have been deleted.
                continue;
            }

            if (workingDocument.isVersion()) {
                workingDocument.putContextData(ALLOW_VERSION_WRITE, Boolean.TRUE);
            }

            workingDocument.putContextData("disableNotificationService", Boolean.TRUE);
            workingDocument.putContextData(PARAM_DISABLE_AUDIT, Boolean.TRUE);
            workingDocument.putContextData(DISABLE_AUTO_CHECKOUT, Boolean.TRUE);
            session.saveDocument(workingDocument);
        }
    }

    @Override
    public void endBucket(ComputationContext context, BulkStatus delta) {
        context.produceRecord("o1", record);
        record = null;
    }

}
